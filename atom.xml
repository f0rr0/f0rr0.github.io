<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuppi.es/</id>
    <title>Yuppies</title>
    <updated>2018-12-24T05:35:44Z</updated>
    <author>
        <name>Sid Jain</name>
        <email>sid_26@outlook.com</email>
        <uri>https://yuppi.es/about</uri>
    </author>
    <link rel="alternate" href="https://yuppi.es"/>
    <subtitle>By Sid Jain — an autodidact, tinkerer and maker of things. Interested in everything λ.</subtitle>
    <rights>All rights reserved  2018, Sid Jain</rights>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[2016 Music in Review]]></title>
        <id>https://yuppi.es/blog/2016-music-in-review/</id>
        <link href="https://yuppi.es/blog/2016-music-in-review/">
        </link>
        <updated>2016-11-02T23:00:00Z</updated>
        <summary type="html"><![CDATA[A round up of the seven best artists, both old and new, that I discovered in 2016.]]></summary>
        <content type="html"><![CDATA[<p>2016 saw me clocking 10,972 listens of 2,238 different tracks from 1,344 unique artists. If anything, these numbers indicate that I spend a lot of time with my <a href="https://www.marshallheadphones.com/mh_us_en/woburn-black">Marshall</a> and <a href="http://v-moda.com/crossfade-m-100/">V-Moda</a>. But as a wise statistician once said,</p>
<blockquote>
<p>Statistics are like bikinis. What they reveal is suggestive, but what they conceal is vital.</p>
</blockquote>
<p>these numbers fail to register the great artists, both new and old, and their awesome music, that I discovered in 2016. For the sake of fellow enthusiasts, the 7 best new discoveries:</p>
<h4>Sickick</h4>
<p><a href="https://open.spotify.com/artist/3NR7hAacOhmcztWvD7vJfS">Spotify</a> &#xB7; <a href="https://soundcloud.com/sickickofficial">SoundCloud</a><br>
Toronto based with R&amp;B, hip hop and melodic roots, he is the alter ego of Lomaticc from <a href="https://www.youtube.com/watch?v=n-lHXXnM4qA">Culture Shock</a>. Sickick recently opened for Drake with a live mix of the <a href="https://www.facebook.com/sickickmusic/videos/959405430847210/">feedback from a mic</a> among other offerings.</p>
<h4>Swell</h4>
<p><a href="https://open.spotify.com/artist/78xSB1R1x8T6o0QuRaodez">Spotify</a> &#xB7; <a href="https://soundcloud.com/swll">SoundCloud</a><br>
Melbourne based, 16 year old Swell is part of the <a href="https://soundcloud.com/baewave">Baewave</a> collective. His style borrows from producers like Haywyre, What So Not, Kaytranada and Baauer among others. Expect a fusion of R&amp;B, deep bass and jazz instrumentals.</p>
<h4>LRKR</h4>
<p><a href="https://open.spotify.com/artist/0yTK74zLEsMyrdVPjw3Zqi">Spotify</a> &#xB7; <a href="https://soundcloud.com/iamlrkr">SoundCloud</a><br>
The majority of music I listen to is lyric-less and it&#x2019;s great in the sense that it allows you to get lost in its rythms and beats. The music speaks for itself. Brooklyn based producer, LRKR, gets it absolutely right with an amalgam of hip hop and electronica with traditional woodwind interludes.</p>
<h4>Darius</h4>
<p><a href="https://open.spotify.com/artist/5vfEaoOBcK0Lzr07WN8KaK">Spotify</a> &#xB7; <a href="https://soundcloud.com/dariusofficial">SoundCloud</a><br>
French producer heavily inspired from the likes of Daft Punk, Mr. Oizo and S&#xE9;bastien Tellier. His music is layered with heavy percussive beats and a gentle, calm melody.</p>
<h4>The Deli</h4>
<p><a href="https://open.spotify.com/artist/1EJzWKVDeysgbyuZGfEFde">Spotify</a> &#xB7; <a href="https://soundcloud.com/the-deli">SoundCloud</a><br>
All I know about this guy is that his real name is David Pryor and he is based out of Austin. He mixes sharp percussive beats with slow, jazzy melodies and a serious amount of awesomeness.</p>
<h4>Skott</h4>
<p><a href="https://open.spotify.com/artist/6J3RPKUwZlKMzh3vWa9wPc">Spotify</a> &#xB7; <a href="https://soundcloud.com/skottpeace">SoundCloud</a><br>
Scandinavian artists usually know what they&#x2019;re doing. With her R&amp;B vocals and approvals by the likes of <a href="https://twitter.com/lorde/status/743892035443122176">Lorde</a>, <a href="https://twitter.com/katyperry/status/783951588868055040">Katy Perry</a> and <a href="https://twitter.com/bastilledan/status/781578685434499072">Bastille</a>, she is all set to become the next queen of pop. If I might add, she looks as gorgeous as she sounds.</p>
<h4>Stephen</h4>
<p><a href="https://open.spotify.com/artist/64N1HzkQEXvjlJBQinWeu2">Spotify</a> &#xB7; <a href="https://soundcloud.com/ithinkimcrashin">SoundCloud</a><br>
Los Angeles based producer, singer-songwriter Stephen Swartz, known by his stage name Stephen, combines indie vocals with dark distorted bass lines. His cover of Adele&#x2019;s Hello is second only to the original.</p>
<p><em>Playlist on <a href="https://open.spotify.com/user/sidjain95/playlist/2DsCwJgb6oJ9MwvVKpqzkt">Spotify</a></em><br>
<em>Playlist on <a href="https://soundcloud.com/sid-jain-6/sets/2016-fresh">SoundCloud</a></em></p>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2018 Music in Review]]></title>
        <id>https://yuppi.es/blog/2018-music-in-review/</id>
        <link href="https://yuppi.es/blog/2018-music-in-review/">
        </link>
        <updated>2018-12-22T23:00:00Z</updated>
        <summary type="html"><![CDATA[Musings on music and me in 2018.]]></summary>
        <content type="html"><![CDATA[<p>As the year draws to an end, I must do my highly absurd annual music review. I was a zealous listener this year having played music on my phone and computer more than 7,300 times. That is an increase of 43% from the 5,078 times last year. However, I fell short by 4000 of my all time high of 11,047 in 2016. Overall, I spent 28,379 minutes listening to music in 2018, 40% more than in 2017.</p>
<figure><img src="https://yuppi.es/blog/2018-music-in-review/scrobbles.svg" alt="All music played" class="full-width"><figcaption>All music played</figcaption></figure>
<p>I was able to sample 2,185 unique tracks listening to each of them thrice on average. This is a considerable increase from 1,881 in 2017 and 2,166 in 2016. It also implies that I listened to more new music this year than ever before. I should attribute this to the fact that this year, I was exposed to a lot of new artists based out of Europe.</p>
<figure><img src="https://yuppi.es/blog/2018-music-in-review/tracks.svg" alt="Unique Tracks" class="full-width"><figcaption>Unique Tracks</figcaption></figure>
<p>Here are the top 5 tracks which collectively clocked 729 listens. Among these, Nobody Knows by Autograf became my all-time favourite track with 225 listens while Dawn&#x2019;s Insight by 2nd Exit graduated to all-time number 3 with 200 listens.</p>
<p>@<a href="https://www.youtube.com/embed?listType=playlist&amp;list=PLf_VRDqK9R5v7x5LMpbLDhOT7j1tOmspS">youtube</a></p>
<p>Although, when it comes to artists, I clocked an all time low of 1,014. This is down from 1,061 in 2016 and 1,315 in 2016. It implies that this year, more than ever before, I listened to more music from any given artist.</p>
<figure><img src="https://yuppi.es/blog/2018-music-in-review/artists.svg" alt="Unique Artists" class="full-width"><figcaption>Unique Artists</figcaption></figure>
<p>Allan Rayman turned out to be my favourite artist in 2018 by a huge margin. I spent 15 hours listening to him. Here are the top Allan Rayman tracks I listened to.</p>
<p>@<a href="https://www.youtube.com/embed?listType=playlist&amp;list=PLf_VRDqK9R5u-rdWuwnvKToZSAlQFzz1y">youtube</a></p>
<p>According to data from Spotify, I listened to more obscure non-mainstream music this year than ever before. I am not sure if I should be worried or pleased. Only 34% of my music was within my most listened genre which implies that my music picks came from diverse genres.</p>
<figure><img src="https://yuppi.es/blog/2018-music-in-review/obscure.png" alt="spotifywrapped.com"><figcaption>spotifywrapped.com</figcaption></figure>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How We Built Our React Native App]]></title>
        <id>https://yuppi.es/blog/how-we-built-our-react-native-app/</id>
        <link href="https://yuppi.es/blog/how-we-built-our-react-native-app/">
        </link>
        <updated>2017-09-14T22:00:00Z</updated>
        <summary type="html"><![CDATA[The design philosophy, tech stack and tooling that went into building a React Native App at Housing.com]]></summary>
        <content type="html"><![CDATA[<p><em>Cross Posted from <a href="https://medium.com/engineering-housing/how-we-built-our-react-native-app-3380a33811ac">Engineering @ Housing</a></em></p>
<figure><img src="https://yuppi.es/blog/how-we-built-our-react-native-app/hero.png" alt="housing.com/apps" class="full-width"><figcaption>housing.com/apps</figcaption></figure>
<p>Last year we <a href="https://medium.com/engineering-housing/progressing-mobile-web-fac3efb8b454">launched our PWA</a> with
an aim to improve the experience of our users on slow and inconsistent network
connections. It was the first step towards the quality of the products we strive
for. We received a very positive response from the community as well as our
customers and wanted to replicate the same success for our mobile application
too.</p>
<blockquote>
<p>An ideal mobile application should be an extension of the mobile web instead of
being a replacement.</p>
</blockquote>
<h4>Challenges</h4>
<ol>
<li>We are building experiences on 3 different platforms, namely: Android, iOS and
the web (desktop and mobile).</li>
<li>This means duplication of business logic across 4 codebases, which is not the
best thing to do if you go by
<a href="https://en.wikipedia.org/wiki/Don&apos;t_repeat_yourself">DRY</a>.</li>
<li>It also means introducing new features or modifying existing features requires
making the necessary changes across 4 separate codebases. This is not scalable
at all and the platforms would soon end up being out of sync.</li>
<li>Finally, we would have to build and strategically expand 3 separate teams of
developers for each of the 3 platforms.</li>
</ol>
<h4>Objectives</h4>
<p>To overcome these challenges, we decided to place our bets on the newly emerging
breed of cross-platform native apps built with a modern frontend stack in
JavaScript. We began implementing the apps with the following main objectives:</p>
<ol>
<li>Although the apps would be written in JavaScript, they should not compromise on
the experience and responsiveness that users associate with &#x2018;native&#x2019; apps. In
simpler words, if you&#x2019;re the user, the app should feel just like any other
native app on the App Store or Play Store.</li>
<li>The app should reuse as much code as possible across Android and iOS. This would
be in line with the principle of DRY. It would also imply that maintaining the
code is far easier and adding/modifying/removing features means touching the
minimum number of files possible.</li>
<li>Last but not least, the stack used should be familiar to our team of product
engineers for the web and the dependence on platform specific native developers
should be reduced. This is also in line with increasing the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> at Housing.</li>
</ol>
<h4>Stack</h4>
<ul>
<li><a href="http://reactnavigation.org/">react-navigation</a> &#x2014; still in its early days but it
solves the much debated navigation issue in a declarative manner using the
Animated API. It also fits well into our redux based state management system
since it&#x2019;s a purely JS based solution. However, we are investigating into other
native and hybrid navigation solutions as well.</li>
<li><a href="https://redux-observable.js.org/">redux-observable</a> &#x2014; the JS ecosystem is still
figuring the best solution to async state management but in the end, it is more
of a &#x2018;to each his own&#x2019; problem. We decided to use redux-observable because it
helps us isolate side effects nicely and handle them with the expressive power
<a href="http://reactivex.io/rxjs/">RxJS</a> operators. This approach also allows us to
test our side-effects handling code in an isolated manner.</li>
<li><a href="https://facebook.github.io/immutable-js/">immutable</a> &#x2014; we faced nasty and hard
to find bugs on previous platforms which arose from mutations caused in our
reducers. To mitigate this issue for once and for all, we decided to use
immutable data structures throughout the app. This was made possible by a custom
reducer factory which converts between immutable and vanilla JS data structures.</li>
<li><a href="http://ramdajs.com/">ramda</a> &#x2014; as far as possible, we made it a point to code in
a functional, declarative paradigm via pure functions which handle most of our
business logic. Ramda has been irreplaceable for us in that regard.</li>
<li><a href="https://github.com/rt2zz/redux-persist">redux-persist</a> &#x2014; Unlike web apps,
native apps have a notion of offline mode and persisted state. This library
along with
<a href="https://github.com/wildlifela/redux-persist-migrate">redux-persist-migrate</a>
gracefully solved this problem with a backing
<a href="https://facebook.github.io/react-native/docs/asyncstorage.html">AsyncStorage</a>
layer.</li>
</ul>
<h4>Tooling</h4>
<figure><img src="https://yuppi.es/blog/how-we-built-our-react-native-app/tools.png" alt="" class="full-width"></figure>
<p>Besides the usual suspects &#x2014; <a href="https://yarnpkg.com/en/">yarn</a>,
<a href="https://prettier.io/">prettier</a>, <a href="https://eslint.org/">eslint</a> and
<a href="https://github.com/typicode/husky">husky</a>, we depend on the following tools as
well:</p>
<ul>
<li><a href="https://storybook.js.org/">storybook</a> &#x2014; it provides excellent support for
developing isolated native components. As a result, we were able to code our UI
components as a one-to-one mapping of our design guide. We are looking into
deploying it internally so that designers have access to actual components as
well.</li>
</ul>
<figure><img src="https://yuppi.es/blog/how-we-built-our-react-native-app/styleguide.png" alt="Styleguide (Consistent across Android and iOS)" class="full-width"><figcaption>Styleguide (Consistent across Android and iOS)</figcaption></figure>
<ul>
<li><a href="https://microsoft.github.io/code-push/">codepush</a> &#x2014; this is one area where
react native apps really shine. We use codepush for releasing unobtrusive over
the air updates to our users while completely owning the rollout percentages and
target versions.</li>
<li><a href="https://fastlane.tools/">fastlane</a> &#x2014; managing different environments (staging,
development, production) and automating our builds proved to be a breeze with
fastlane. We exposed a parameterized build dashboard on our internal
<a href="https://jenkins.io/">Jenkins</a> CI which manages everything from app secrets,
code signing, <a href="https://developer.apple.com/testflight/">Test Flight</a> and
<a href="http://try.crashlytics.com/beta/">Crashlytics Beta</a> uploads, registering
devices for internal test builds, releasing OTA updates through codepush etc.</li>
<li><a href="http://facebook.github.io/jest/">jest</a> and
<a href="https://github.com/wix/detox">detox</a> &#x2014; this combination resulted in a
delightful testing platform for our app. Jest proved to be slightly cumbersome
to set up for react native given the fact that we had to write mocks for native
modules, but it was worth the effort. Detox by the folks at <a href="https://www.wix.engineering/">Wix Engineering</a> simplified the end-to-end testing
story for us.</li>
<li><a href="https://sentry.io/welcome/">sentry</a> &#x2014; The folks at
<a href="http://sentry.io/">sentry.io</a> introduced first class support for react-native
apps sometime back. The new SDK enriches error reports with a lot of useful
device specific data and provides holistic reports with both native and JS stack
traces.</li>
</ul>
<blockquote>
<p>More than 90% of the app&#x2019;s source code is in JavaScript while not compromising
on performance and quality.</p>
</blockquote>
<h3>Learnings</h3>
<p>React Native is a <strong>relatively</strong> young platform. The community around it is
still deliberating on best practices and the <em>right way</em> to do certain things.
As a starting point, however, the <a href="https://facebook.github.io/react-native/">official docs</a> are the best resource we have come across. Here are some things we learnt along the way:</p>
<ul>
<li>
<p><strong>InteractionManager &#x2014;</strong> This is your best friend when it comes to perf. There
has been a
<a href="https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html">considerable</a>
<a href="https://github.com/wix/react-native-interactable">effort</a> by the community to
move expensive things to run on native threads since JS is single threaded.
There are times when you need to do expensive stuff in JS without affecting the
perf of your animations/transitions/user interactions. InteractionManager
provides a <a href="http://facebook.github.io/react-native/releases/0.48/docs/interactionmanager.html#interactionmanager">nice scheduling API</a> to defer this expensive stuff until after said animations/transitions/interactions
have completed.</p>
</li>
<li>
<p><strong>requestAnimationFrame &#x2014;</strong> This one is borrowed from the web and works
identically. A particular use case is the ripple effect on Android devices. The
usual approach of using a<code>TouchableNativeFeedback</code> with an apt <code>onPress</code> handler
does not always work here. At times, you might not see the ripple. Instead, if
you wrap your <code>onPress</code> handler in a <code>requestAnimationFrame</code> block, you&#x2019;ll
notice the animations are visible perfectly.</p>
</li>
<li>
<p><strong>MessageQueue &#x2014;</strong> React Native works by communicating between the JS and native
realms over a bridge. As a result, there is constant chit-chat over this bridge
which can affect performance adversely if not moderated properly. The <code>spy</code>
method on <code>MessageQueue</code> , as the name suggest, lets you spy on this chit-chat
and see what&#x2019;s being sent across. This might help you understand what&#x2019;s actually
happening underneath and improve performance.</p>
</li>
</ul>
<pre><code class="language-js">MessageQueue.spy(true)
</code></pre>
<ul>
<li>
<p><strong>setNativeProps &#x2014;</strong> From the official docs &#x2014; &#x201C;<code>setNativeProps</code> is the React
Native equivalent to setting properties directly on a DOM node&#x201D;. At times, for
reasons only known to you, you might want to manipulate the underlying native
view that backs your JS view while short-circuiting the react render cycle. We
used this only in a couple of places because everything else just did not work
well enough. Avoid using it or use it very wisely if you must.</p>
</li>
<li>
<p><strong>Structuring &#x2014;</strong> From the get go, we followed a simple organization structure
for our repo. We separated our dumb UI <strong>components</strong> from stateful <strong>views</strong>.
State management was all taken care of in our <strong>epics</strong> and <strong>reducers</strong>. We
observed that randomly scattered side-effect generating code becomes the
bottleneck in keeping our codebase performant and testable. Our approach with
redux-observable helped us mitigate some of those pains. Consider the following
example:</p>
</li>
</ul>
<pre><code class="language-js">export default function localitySelect(action$, store, { ajax }) {
  return action$
    .ofType(&apos;LOCALITY_AUTOCOMPLETE&apos;)
    .debounceTime(150)
    .distinctUntilChanged()
    .switchMap(({ payload: { text, cursor } }) =&gt; {
      return ajax
        .getJSON(
          `${api.searchSuggest}&amp;cursor=${cursor}&amp;string=${text}`
        )
        .retry(3)
        .map(({ response }) =&gt; ({
          type: &apos;LOCALITY_SUGGEST&apos;,
          payload: { data: response }
        }))
        .catch(error =&gt;
          Observable.of({
            type: &apos;LOCALITY_SUGGEST&apos;,
            payload: { error },
            error: true
          })
        )
    })
}
</code></pre>
<p>We were able to contain most of the side-effect code in a single function rather
than piggy-backing on component lifecycle methods. Also, we injected the
side-effect making dependency &#x2014; <code>ajax</code> in this case, into the function itself.
This can be replaced by something that just mocks the network requests in a test
environment.</p>
<ul>
<li><strong>Redux Middleware &#x2014;</strong> Since the entire app state lives in redux including
navigation, redux middleware become indispensable in executing code in response
to actions. In our case, we delegated the analytics (screen tracking), logging,
error reporting, modifying the device status bar and memory management to
dedicated middleware. This effectively removes this code from individual views
and keeps them lean. Here&#x2019;s an example that switches between a dark or light
status bar on iOS based on the current screen:</li>
</ul>
<pre><code class="language-js">const statusBarMiddleware = ({ getState }) =&gt; next =&gt; (action) =&gt; {
  if (!Object.values(NavigationActions).includes(action.type)) {
    return next(action)
  }
  const currentScreen = getCurrentRouteName(getState().rootNavigation)
  const result = next(action)
  const nextScreen = getCurrentRouteName(getState().rootNavigation)
  if (nextScreen !== currentScreen &amp;&amp; Platform.OS === &apos;ios&apos;) {
    setStyleForRoute(nextScreen)
  }
  return result
}
</code></pre>
<h3>Build Pipeline</h3>
<figure><img src="https://yuppi.es/blog/how-we-built-our-react-native-app/pipeline.png" alt="" class="full-width"></figure>
<p>The official docs provide a plethora of insight into the API and the platform
itself. In the end, however, you need to deploy your new shiny app. This also
involves challenges like maintaining multiple environments for testing and
staging, incorporating different credentials in an unobtrusive manner,
generating release notes and notifying all stakeholders (product managers,
testers and designers). After experimenting and struggling with a bunch of
approaches, we moved to Fastlane to automate this entire process. Following is
an abridged version of our beta release cycle on iOS:</p>
<pre><code class="language-ruby">desc &quot;Submit a new Beta Build to Crashlytics&quot;
  lane :beta do |options|
    automatic_code_signing(
      path: &quot;housing.xcodeproj&quot;,
      use_automatic_signing: true
    )
    register_devices(devices_file: &quot;./devices.txt&quot;)
    match(
      type: &quot;development&quot;,
      force_for_new_devices: true
    )
    humanable_build_number(update: true)
    gym(
      scheme: &quot;housing&quot;,
      clean: true
    )
    crashlytics(
      api_token: &quot;XXXXXXXX&quot;,
      build_secret: &quot;XXXXXXXX&quot;,
      crashlytics_path: &quot;./Pods/Crashlytics&quot;,
      emails: user_email,
      groups: &quot;coders,qa&quot;,
      notes: options &amp;&amp; options[:notes] ? options[:notes]
        : &quot;Branch #{git_branch} built by #{user_email}\n#{changelog_from_git_commits(
          commits_count: sh(&quot;git cherry beta | wc -l&quot;).to_i,
          date_format: &quot;short&quot;,
          merge_commit_filtering: &quot;exclude_merges&quot;
        )}&quot;
    )
    release(
      bundle_identifier: &quot;XXXXXXX&quot;,
      sentry_organisation: &quot;housing&quot;,
      sentry_app_name: &quot;housing-app-staging&quot;,
      deployment_name: &quot;Staging&quot;,
      target_version: &quot;1.0&quot;
    )
    slack(
      slack_url: &quot;https://hooks.slack.com/services/XXXXXXXXXX&quot;,
      payload: {
        &quot;Build Number&quot; =&gt; humanable_build_number,
        &quot;Built By&quot; =&gt; user_email
      }
    )
    add_git_tag(
      grouping: &quot;ios&quot;,
      prefix: &quot;v&quot;,
      build_number: humanable_build_number
    )
  end
</code></pre>
<p>This piece of code handles code-signing, registering devices for testing,
incrementing build numbers, building the app, uploading it to Crashlytics Beta,
generating release notes, releasing it on code-push and uploading the
source-maps to sentry, notifying on a slack channel and finally adding a release
tag on GitHub. You can potentially do anything that pertains to building here.
This code sits beside the main application code. Since the CI pulls in a fresh
version of our repo before each build, it is ridiculously easy to modify the
build pipeline without breaking the CI.</p>
<h3>Pro-Tips</h3>
<ol>
<li>Read the <a href="https://facebook.github.io/react-native/">docs</a> as well as the
<a href="https://github.com/facebook/react-native/releases">release notes</a>.</li>
<li><code>yarn start &#x2014;- --reset-cache</code> &#x2014; for when you installed something and it does not
work/can&#x2019;t be found.</li>
<li><a href="https://github.com/jhen0409/react-native-debugger">react-native-debugger</a> &#x2014; The
standalone app based on official debugger of React Native, and includes React
Inspector / Redux DevTools.</li>
<li>Make the bundled <a href="https://facebook.github.io/react-native/docs/performance.html#what-you-need-to-know-about-frames">Perf
Monitor</a>
your best friend.</li>
<li>Always test on a real device.</li>
<li><a href="https://facebook.github.io/react/">Knowing React</a> is a pre-requisite.</li>
</ol>
<h3>Acknowledgement</h3>
<p><em><a href="https://twitter.com/f0rr0">Siddharth</a></em>,
<em><a href="https://twitter.com/shahbhavir">Bhavir</a></em>,
<em><a href="https://twitter.com/ritz078">Ritesh</a></em>,
<em><a href="https://twitter.com/Innocent__Freak">Vikas</a></em>,
<em><a href="https://twitter.com/dxtr026">Rahul</a></em>, Amandeep and
<em><a href="https://twitter.com/heavenhackers">Dron</a></em> worked in the React Native Apps
Team. Rohit and <em><a href="https://twitter.com/HarishBarge33">Harish</a></em> handled QA.</p>
<p>Special thanks to <em><a href="https://twitter.com/ritz078">Ritesh</a></em> for the illustrations.</p>
<blockquote>
<p>Disclaimer: We don&#x2019;t advocate for any of the tools, libraries, coding practices
or software development philosophies mentioned here. You are welcome to read,
learn, accept, reject and critique however you see fit.</p>
</blockquote>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interviewing with Housing.com]]></title>
        <id>https://yuppi.es/blog/interviewing-with-housing-com/</id>
        <link href="https://yuppi.es/blog/interviewing-with-housing-com/">
        </link>
        <updated>2016-11-30T23:00:00Z</updated>
        <summary type="html"><![CDATA[My experience and lessons learnt from interviewing with a leading Indian tech startup.]]></summary>
        <content type="html"><![CDATA[<figure><img src="https://yuppi.es/blog/interviewing-with-housing-com/housing.jpg" alt="" class="full-width"></figure>
<p><em>Disclaimer: The opinions expressed in this article are my own and are, in no conceivable way, connected, correlated or inspired by those of <a href="http://Housing.com">Housing.com</a> or its employees and representatives.</em></p>
<p>With that verbose legalese out of the way, let&#x2019;s get started.</p>
<h4>Motivation</h4>
<p>I am a passionate follower &#x270C;&#xFE0F; of the tech twitterati &#x2728;, particularly the &#x2018;web technologies&#x2019; twitterati &#x2728;. Of late, the twitterverse &#x1F30E; has been flooded with mentions of a new breed of experience for the web, particularly, the mobile web. <a href="https://developers.google.com/web/progressive-web-apps/">Progressive Web Applications</a> (or PWAs) &#x26A1;&#xFE0F; are the next big thing when it comes to providing fast, reliable and engaging experiences, akin to those of native apps, right from the browser.
Now, among the immediately visible players in India, who have placed their bets on PWAs, <a href="http://tech-blog.flipkart.net/2015/11/progressive-web-app/">Flipkart</a> and <a href="https://www.youtube.com/watch?v=dug_6lgZ7dw">Housing.com</a> are the behemoths. Given my background of fiddling with technologies that go into making said PWAs, I decided to approach the latter with the proposition of pooling our know-how and building cool stuff together.</p>
<h4>First Contact</h4>
<p>There are many ways to approach a tech company when it comes to jobs. One could ask for a reference from current employees, reach out to a hiring manager, fill in the forms on the careers webpage, or just send out a cold email precisely stating one&#x2019;s credentials and motivations. I decided to go with that last one. The email was as to-the-point as it gets. I mentioned a bit about my weird educational background &#x1F62C;, some related previous projects and genuine motivation to work at <a href="http://Housing.com">Housing.com</a>.</p>
<h4>Did It Work Though?</h4>
<p>Yes, it did &#x1F62E;. That&#x2019;s lesson number one right here.</p>
<blockquote>
<p>If your motivations are genuine and your credentials are sound, don&#x2019;t be afraid to reach out to a company you want to work with. This holds even if you think there might not be any vacancies. Make the effort to reach out and show positive interest.</p>
</blockquote>
<p>The following day, I received an email from the Head of HR at <a href="http://Housing.com">Housing.com</a>, which was followed by a call shortly thereafter. She informed me that they found my profile interesting and wanted to schedule a technical interview the very same day. I consented and started brushing up on those tricky space and time complexity questions &#x1F628;.</p>
<h4>Technical Round 1</h4>
<p>It&#x2019;s not everyday that you get an interview from a cold email, so I guess I must have been really lucky. And that luck ran out quickly indeed. At the predetermined time, I went AWOL &#x1F636;. My interviewer and the Head of HR left me a couple of calls and Skype messages which I did not return. This is a gross violation of the interviewing etiquette. I have rarely been more ashamed of my conduct. In my defense, I got caught up with an emergency at my current engagement but that doesn&#x2019;t cut it out. At this point, I believed I had blown the opportunity but I left a sincere apology with both the interviewer and my HR POC.</p>
<h4>Technical Round 1 - Encore</h4>
<p>Luckily, my interviewer was awesome &#x1F60E; and agreed to schedule another Skype call for the next day. That&#x2019;s lesson number two for youngins:</p>
<blockquote>
<p>Throughout the interview process, keep your outlook absolutely positive. Face rejection with grace and acceptance with humility. Never let the outcome, be it good or bad, get to your head. This is not the last company in the world and you most certainly are not their last prospective employee.</p>
</blockquote>
<p>The interview was really intensive, thought provoking and thorough. We started off discussing my weird educational background &#x1F62C; and followed it up with some live coding in an online collaborative IDE. I was asked a couple of questions each regarding ECMAScript standard functions, basic algorithmic complexity and tricky JS gotchas. To conclude, the panel asked me questions about front end tooling, particularly <a href="https://facebook.github.io/react/">React</a>, <a href="http://redux.js.org/">Redux</a> and <a href="http://webpack.js.org/">Webpack</a>. These questions were mostly practical and involved some code that I had to reason about. To sum it up:</p>
<blockquote>
<p><a href="http://Housing.com">Housing.com</a> certainly knows what it&#x2019;s doing. This was the most comprehensive interview I have had with an Indian company.</p>
</blockquote>
<p>The panel ended the interview with a neutral outlook, so I wasn&#x2019;t really sure if I made the cut. I did, however, receive a call next day from my HR POC to schedule another technical round for that very day itself. I immediately consented and appreciated the expediency with which everything was being facilitated.</p>
<h4>Technical Round 2</h4>
<p>The second round was again via a Skype call. The panel this time consisted of senior management. After introductions, I started off with my weird educational background &#x1F62C;. This round was more theoretical than the previous one. I was asked to write pseudocode for a simple JSX to JS tanspiler. This was followed by questions about the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">DOM</a> - how it&#x2019;s represented in memory and how CSS selector matching and DOM traversal work. This basically involves the <a href="https://en.wikipedia.org/wiki/Tree_(data_structure)">Tree ADT</a>. Fortunately, I was paying attention in <a href="http://www.bruinwalk.com/professors/carey-nachenberg/com-sci-32/">Carey Nachenberg&#x2019;s</a> CS32 lectures (which is, hands down, the most useful CS class at UCLA). The remaining questions were about how a web browser works. This basically involved the <a href="https://developers.google.com/web/fundamentals/performance/rendering/">rendering pipeline</a> and <a href="https://www.youtube.com/watch?v=RCFQu0hK6bU">optimizing runtime performance</a>. This round ended up on a positive note. The panel seemed really happy with my answers. We went on to discuss the culture at <a href="http://housing.com">housing.com</a> and life in Bombay. I was informed that HR would call me with the offer and formalities.</p>
<h4>The Offer</h4>
<p>If you skipped everything before this to see what they offered &#x1F4B0;, I am not sorry to disappoint you. However, I can divulge that the offer was extremely competitive and in line with what giants like Amazon, Adobe, Flipkart etc. would offer. A quick check with my IIT pals confirmed the fact that it was, indeed, extremely good &#x1F631; by IIT standards as well. Besides the monetary compensation, <a href="http://housing.com">housing.com</a> has great perks &#x1F62E; and supposedly, a young management &#x2B06;&#xFE0F;. This factor is usually underestimated, but in my experience, goes a long way in defining your productivity at any tech company. Needless to say it was what I had expected and I did end up accepting the offer.</p>
<h4>Fin</h4>
<p>In the five months I have spent navigating the startup scene globally as a drop out, there is one thing I can&#x2019;t be more convinced of:</p>
<blockquote>
<p>Your degree does not matter for &#x1F4A9; unless it&#x2019;s backed up with pragmatic, immediately applicable, real world knowledge. Analytical skills, the ability to think rationally and a solid problem solving approach take your credibility much further than a piece of paper.</p>
</blockquote>
<p>Take this as a derision of educational institutions, not education itself. In my humble opinion, if going to college makes you more prepared for the kind of roles you want to take on in the future, by all means - go to college. It is still the best way to accumulate a diversity of experiences and increase your connection capital. But if you feel that restricting yourself and &#x2018;your&#x2019; education to the rigidity of a college structure <a href="https://www.ted.com/talks/ken_robinson_says_schools_kill_creativity">kills your creativity</a> or unduly stigmatizes failure and mistakes, just don&#x2019;t do it. Do your own thing.</p>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kickback With Koa & Webpack]]></title>
        <id>https://yuppi.es/blog/kickback-with-koa-webpack/</id>
        <link href="https://yuppi.es/blog/kickback-with-koa-webpack/">
        </link>
        <updated>2016-06-27T22:00:00Z</updated>
        <summary type="html"><![CDATA[Build a KoaJS server with ES7 async/await. Hot patch it without restarting via Webpack Hot Module Replacement. Achieve DX nirvana.]]></summary>
        <content type="html"><![CDATA[<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/banner.png" alt="Written at Kerckhoff Coffee House ~ LA Westside" class="full-width"><figcaption>Written at Kerckhoff Coffee House ~ LA Westside</figcaption></figure>
<h4>Yet Another JavaScript Framework?</h4>
<p><a href="https://nodejs.org/en/about/">Node.js</a> itself offers a
<a href="https://nodejs.org/docs/latest/doc/api/http.html#http_http">http</a> module which
exposes methods that facilitate creating HTTP clients and servers. However, in
order to support the full spectrum of possible HTTP applications, Node.js&#x2019; HTTP
API is very low-level. This is where frameworks like
<a href="http://expressjs.com/">Express</a>, <a href="http://hapijs.com/">Hapi</a>,
<a href="http://restify.com/">Restify</a>, and <a href="http://koajs.com/">Koa</a> come in.</p>
<h4>Quick Word on Express</h4>
<p>Express is undoubtedly the most popular Node.js application framework in use
today. A quick check reveals that 10434 packages on
<a href="https://www.npmjs.com/">npm</a> list Express as a dependency. This number probably
increases by the day. The initial commit for Express was made in 2009 by <a href="https://medium.com/u/bbb3c7ccb0a0">TJ
Holowaychuk</a> and 660 commits later, version
0.0.1 was released. Express ownership was transferred to StrongLoop, in 2014,
which eventually got acquired by IBM. The current lead maintainer of the project
<a href="https://github.com/expressjs/express/issues/2844#issuecomment-173758490">did not have many nice things to
say</a>
about StrongLoop/IBM.</p>
<h4>Aloha Koa</h4>
<p>The initial commit for Koa was 3 years ago, by none other than the man himself &#x2014;
<a href="https://medium.com/u/bbb3c7ccb0a0">TJ Holowaychuk</a>. He described it back then
as:</p>
<blockquote>
<p>&#x201C;Expressive middleware for node.js using generators via
<a href="https://github.com/tj/co">co</a> to make writing web applications and REST APIs
more enjoyable to write&#x201D;.</p>
</blockquote>
<p>Basically, Koa allows you to do away with the callback pattern and makes
error-handling more efficient. Everything in Koa is middleware which makes
writing code more intuitive and easy (at least for me). Koa accomplished this
with <a href="https://davidwalsh.name/es6-generators">generators</a> which were
introduced in <a href="http://www.ecma-international.org/ecma-262/6.0/">ES2015 (ES6)</a>.
This can be run natively in Node.js version 0.11+ (with the <code>--harmony</code> flag).
As of <a href="https://github.com/koajs/koa/blob/v2.x/History.md#200-alpha1--2015-10-22">version
2.0.0-alpha.1</a>,
however, the codebase was refactored to <a href="https://tc39.github.io/ecmascript-asyncawait/">async
functions</a> (<a href="https://tc39.github.io/ecma262/2016/">ES2016 or
ES7</a>) in favor of generators.
Unfortunately, these are <a href="https://bugs.chromium.org/p/v8/issues/detail?id=4483">not
supported</a> natively in
<a href="https://developers.google.com/v8/">V8</a> (underlying engine behind the Node.js
runtime) yet.</p>
<h4>Tools of the Trade</h4>
<p>Since Node.js (V8) does not support <code>async</code> functions natively, we will use
<a href="https://babeljs.io/">Babel</a> to transpile them. JavaScript, as a language, is
constantly evolving with new specs and proposals coming out all the time. Babel
allows us to use these features years before they are available everywhere.</p>
<blockquote>
<p>Babel does this by compiling down JavaScript code written with the latest
standards into a version that will work in today&#x2019;s environments. This process is
known as source-to-source compiling aka transpiling.</p>
</blockquote>
<p>To build our application, we will use the <a href="https://webpack.github.io/">Webpack</a>
module bundler which provides an infrastructure for building and transforming
modules. It is discussed in detail in the subsequent sections.</p>
<h4>Talk is Cheap. Show Me the Code.</h4>
<p>The final GitHub repository is linked <a href="https://github.com/f0rr0/koa-webpack-boilerplate">here</a>. Before you begin hacking, make sure you have the latest version of Node.js
<a href="https://nodejs.org/en/">installed</a>. I prefer to use
<a href="https://github.com/tj/n">n</a> to interactively manage Node.js versions. (While
writing this, I discovered that the author of &#x2019;n&#x2019; is <a href="https://medium.com/u/bbb3c7ccb0a0">TJ
Holowaychuk</a> yet again.)</p>
<pre><code class="language-sh">sudo npm cache clean -f
sudo npm install -g n
sudo n latest
</code></pre>
<p>To use some npm commands without <code>sudo</code> you might have to <a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions">fix
permissions</a>.</p>
<h4>Boilerplate for Boilerplate</h4>
<p>We need to set up a minimal NPM package with a <code>package.json</code> file, a directory
for source, and certain essential files for our development tools.</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/dirstructure.png" alt=""></figure>
<p>Go ahead and clone the final repository to your machine to build the minimal
server from source.</p>
<pre><code class="language-sh">git clone https://github.com/f0rr0/koa-webpack-boilerplate
cd koa-webpack-boilerplate
npm install
npm run build:prod
npm start
</code></pre>
<p>If you want to be articulate and follow from scratch, the following GIF will help:</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/bootstrap.gif" alt=""></figure>
<h4>Unbundling Webpack</h4>
<p>Webpack was authored by JavaScript superhero <a href="https://github.com/sokra">Tobias
Koppers</a>. It is used in the
<a href="http://stackshare.io/webpack/in-stacks#/">wild</a> at Pinterest, Hipmunk,
Soundcloud and Typeform among others. It is different from other build tools
(<a href="http://gruntjs.com/">Grunt</a>, <a href="http://gulpjs.com/">Gulp</a>,
<a href="http://brunch.io/">Brunch</a> etc.), that you might be familiar with, since it
does <strong>more</strong> than watching a path and running tasks on files.</p>
<blockquote>
<p>Webpack roams over your application source code, looking for import/require
statements, building a dependency graph, and emitting one (or more) <em>bundles</em>
for the web (<a href="https://webpack.github.io/docs/configuration.html#target">or other
targets</a>).</p>
</blockquote>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/webpack.png" alt=""></figure>
<p>It may seem like you can use webpack with only JavaScript modules but that is
not true. With appropriate webpack
<a href="https://webpack.github.io/docs/loaders.html">loaders</a>, you can bundle any
file-type and pre-process it. Basically, what this means is, you can do the
following in your front-end application with the
<a href="https://github.com/webpack/css-loader">css-loader</a>:</p>
<pre><code class="language-js">require(&apos;css!./styles/main.css&apos;);
</code></pre>
<p>If this does not make you run naked in the streets, then I don&#x2019;t know what will.
You can even chain loaders to process files on the fly, like so:</p>
<pre><code class="language-js">require(&apos;style!css!sass!./styles/main.sass&apos;);
</code></pre>
<p>This one-liner appropriately parses the SASS file to CSS and injects it into the DOM in a style tag. To learn more about webpack, read <a href="https://medium.com/u/3b799f227b58">Pete Hunt</a>&#x2019;s <a href="https://github.com/petehunt/webpack-howto">webpack-howto</a>.</p>
<p>When used from the CLI, webpack looks for a configuration file named <code>webpack.config.js</code> in the directory from where webpack was invoked. You can also supply your config file using the <code>--config</code> option from the CLI. So let&#x2019;s install webpack and set up the config file for our repository.</p>
<p>Note &#x2014; You can view and install specific <code>dist-tags</code> for a package on <code>npm</code> like so:</p>
<pre><code class="language-sh">npm view &lt;package-name&gt; dist-tags
npm install &lt;package-name&gt;@&lt;dist-tag&gt;
</code></pre>
<p>In the root directory of your repository:</p>
<pre><code class="language-sh">npm install -D webpack@beta
</code></pre>
<p>This installs webpack as a <strong>development dependency</strong> to your package. Beginning from version 2+, the webpack config file can export a function which returns the configuration. The function is called by the CLI and the value passed via <code>--env</code> from the CLI is passed to the configuration function. Our minimal <code>webpack.config.js</code> will look like so:</p>
<pre><code class="language-js">const { resolve } = require(&apos;path&apos;);
const { dependencies } = require(&apos;./package.json&apos;);
const BabiliPlugin = require(&quot;babili-webpack-plugin&quot;);

const nodeModules = {};

Object
    .keys(dependencies)
    .forEach((mod) =&gt; {
     nodeModules[mod] = `commonjs ${mod}`;
    });

module.exports = (env = { dev: true }) =&gt; ({
    context: resolve(__dirname, &apos;./src&apos;),
    entry: {
     server: env.prod ? &apos;./index.js&apos; : [&apos;webpack/hot/poll?1000&apos;, &apos;./index.js&apos;]
    },
    target: &apos;node&apos;,
    output: {
     filename: &apos;[name].js&apos;,
     path: resolve(__dirname, &apos;./build&apos;),
     pathInfo: !env.prod
    },
    devtool: env.prod ? &apos;source-map&apos; : &apos;eval&apos;,
    module: {
     loaders: [
       {
         test: /\.js$/,
         exclude: /node_modules/,
         loaders: [
           &apos;babel-loader&apos;
         ]
       }
     ]
    },
    plugins: env.prod ? [
      new BabiliPlugin()
    ] : [],
    externals: nodeModules
});
</code></pre>
<p>The various configuration options are well documented
<a href="http://webpack.github.io/docs/configuration.html#configuration-object-content">here</a>.
I&#x2019;ll explain a couple of quirks related to a non-browser environment below:</p>
<ul>
<li><strong>externals:</strong> When writing a server and bundling it with webpack, we don&#x2019;t want our dependencies to be resolved by webpack. Instead, they will become the dependencies of the bundle we generate. To accomplish this, we pull our dependencies from the <code>package.json</code> file and prefix them with <code>commonjs</code>. The Webpack generated import code for a prefixed fictional dependency named <code>xyz</code> will then look like so:</li>
</ul>
<pre><code class="language-js">module.exports = require(&quot;xyz&quot;);
</code></pre>
<p>To ensure that this behaviour is consistent, install dependencies with the <code>-S</code>
or <code>--save</code> option.</p>
<ul>
<li><strong>target:</strong> Setting the target for our bundle to <em>node</em> compiles our modules to be run in a Node.js like environment. What this does is essentially the same as above. It prepends all native modules available in the current Node.js environment with <code>commonjs</code>. Internally, the names of all such modules available to the current process are obtained by:</li>
</ul>
<pre><code class="language-sh">process.binding(&quot;natives&quot;);
</code></pre>
<p>This returns an object with all the native modules like <code>dns</code>, <code>domain</code>, <code>events</code>, <code>fs</code>, <code>http</code> etc.</p>
<h4>Dabble in Babel</h4>
<p>Babel is used in the <a href="https://babeljs.io/users/">wild</a> by the likes of Facebook, Netflix, Airbnb and Yahoo. As mentioned earlier, we will use Babel to transpile our ES6/7 code. This is accomplished from within webpack via the <code>babel-loader</code>. Our config looks for files ending in <code>.js</code> in the <code>./src</code> directory and loads them with <code>babel-loader</code>. Before you can use it though, you need to install it:</p>
<pre><code class="language-sh">npm install -D babel-loader babel-core
</code></pre>
<p>This installs <code>babel-loader</code>, again, as a <strong>development dependency</strong>. <code>babel-loader</code> in turn lists <code>babel-core</code> as its peer dependency which needs to be installed. This is the babel compiler core which exposes the Node.js API. At a high level, Babel runs in three stages: parsing, transforming, and generation. Out of the box, Babel does not transform anything. It just parses code and spits it out exactly the same. To make Babel transform code, we need to (you guessed it!) install plugins.</p>
<p>If you updated your Node.js installation to the latest version, as mentioned earlier, you&#x2019;d have probably ended up with 6.2.2+ which supports <a href="http://node.green/">96%</a> of the ES2015(ES6) features. V8 hasn&#x2019;t landed <a href="https://bugs.chromium.org/p/v8/issues/detail?id=1569">support</a> for ES6 native modules yet but Webpack 2+ takes care of that for us. It understands native ES6 modules which are statically analyzable. This helps in getting rid of extraneous exports from our build aka dead code elimination. Webpack accomplishes this with <a href="http://www.2ality.com/2015/12/webpack-tree-shaking.html">tree-shaking</a>. Sweet! So we just need to worry about those <em>async</em> functions that Node.js 6.2.2 doesn&#x2019;t understand.</p>
<p>The plugin we need is <a href="http://babeljs.io/docs/plugins/transform-async-to-generator/">babel-plugin-transform-async-to-generator</a>. The name is more than self-explanatory. Babel can be configured to use these plugins via the <code>.babelrc</code> file which lives in the root of our repository. Our tiny <code>.babelrc</code> file looks like so:</p>
<pre><code class="language-json5">{
  &quot;plugins&quot;: [&quot;transform-async-to-generator&quot;]
}
</code></pre>
<p>Obviously, it needs to be installed as a <strong>development dependency</strong> before you
can use it:</p>
<pre><code class="language-sh">npm install -D babel-plugin-transform-async-to-generator
</code></pre>
<h4>Catch &#x2019;em All With Koa</h4>
<p>With our build tools in place, we can start writing the server finally. As mentioned earlier, Koa is a very minimal framework and does not offer much out of the box. Everything in Koa is middleware and there are quite a few of them. We will be using Koa 2 which can be installed with the <code>next</code> dist-tag. Go ahead and install Koa and a couple of middleware like so:</p>
<pre><code class="language-sh">npm install -S koa@next koa-route@next koa-logger@next
</code></pre>
<p>For the purpose of this article, we will be mocking a database with the <a href="https://pokeapi.co/">Pokeapi</a>. Since Koa expects <code>xyz</code> to return a Promise in all <code>await xyz</code> expressions, we will make use of <a href="https://github.com/PokeAPI/pokedex-promise-v2">pokedex-promise-v2</a> which is simply a Promise based wrapper for the Pokeapi. Install it like so:</p>
<pre><code class="language-sh">npm install -S pokedex-promise-v2
</code></pre>
<p>We will abstract our database logic into separate modules. Go ahead and create
two new files in the <code>./src</code> directory.</p>
<pre><code class="language-sh">cd src
touch pokemondb.js stats.js
</code></pre>
<ul>
<li><strong>pokemondb.js</strong> just exports a function that takes a string as an argument
and returns a Promise.</li>
</ul>
<pre><code class="language-js">import Pokedex from &apos;pokedex-promise-v2&apos;;

const P = new Pokedex();

export default function get (pokemon) {
   return P.getPokemonByName(pokemon);
};
</code></pre>
<ul>
<li><strong>stats.js</strong> also exports a function that takes an object as an argument and
return a string.</li>
</ul>
<pre><code class="language-js">export default function stats (data) {
   return (
      `
      NAME   : ${data.name}
      HEIGHT : ${data.height}
      WEIGHT : ${data.weight}
      BASE XP: ${data.base_experience}
      `
   );
}
</code></pre>
<p>With our mock database and helper method in place, we can go ahead and consume
it in our server. The <code>index.js</code> looks like so:</p>
<pre><code class="language-js">import get from &apos;./pokemondb&apos;;
import stats from &apos;./stats&apos;;
import Koa from &apos;koa&apos;;
import route from &apos;koa-route&apos;;
import logger from &apos;koa-logger&apos;;

const getPokemonFromAPI = async (ctx, name) =&gt; {
  try {
   const data = await get(name);
   ctx.body = stats(data);
  } catch (err) {
    ctx.throw(404, err.error.detail);
  }
};

const app = new Koa();
app.use(logger())
   .use(route.get(&apos;/:name&apos;, getPokemonFromAPI))
   .listen(8000);
console.log(&apos;Listening on Port 8000&apos;);
</code></pre>
<p>The main point of interest here is the asynchronous <code>getPokemonFromAPI</code>
function. If you have done asynchronous programming in JavaScript before, you
must be aware of the <a href="http://callbackhell.com/">callback pattern and the problems it
brings</a>. If that is indeed the case, this function
should make you shed tears of joy. Note how this idiom lets us handle errors
gracefully in a try-catch block.</p>
<p>We will be using some neat npm run scripts to build and start our server.</p>
<pre><code class="language-sh">&apos;scripts&apos;: {
  &apos;clean&apos;: &apos;rm -rf ./build&apos;,
  &apos;build:prod&apos;: &apos;npm run clean &amp;&amp; `npm bin`/webpack --env.prod&apos;,
  &apos;watch&apos;: &apos;npm run clean &amp;&amp; `npm bin`/webpack --watch --verbose&apos;,
  &apos;start&apos;: &apos;node ./build/server.js&apos;
}
</code></pre>
<p>Besides <code>start</code> and <code>clean</code>, which are trivial, we will use <code>build:prod</code> to make
a production build by passing <code>prod</code> via <code>--env</code> as mentioned earlier.</p>
<p>Go ahead and run the following in the root of your repository and open
<code>localhost:8000</code> in your browser.</p>
<pre><code class="language-sh">npm run build:prod
npm start
</code></pre>
<p>Well, there isn&#x2019;t much to see because our server returned a 404.</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/404.png" alt="Oh no!"><figcaption>Oh no!</figcaption></figure>
<p>This is understandable since we don&#x2019;t have a route handler attached to our base
URL: <code>&#x2018;/&#x2019;</code>. This prompts Koa to return it&#x2019;s default 404 message. Go ahead and
fix this by adding that route-handler to our <code>index.js</code> file.</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/routehandler.png" alt=""></figure>
<p>Before you can see these changes reflected, you need to build the bundle again.
This is a bummer. We want our bundle to be regenerated every time we make
changes to our source files. Our <code>watch</code> script takes care of that by running
Webpack in development mode with the <code>--watch</code> option. Webpack will now watch
our files and generate a new bundle when we save changes. Run the <code>watch</code> script
like so:</p>
<pre><code class="language-sh">npm run watch
</code></pre>
<p>Webpack won&#x2019;t exit since it keeps watching the files. Open a new shell in the
root of your repository to start the server.</p>
<pre><code class="language-sh">npm start # in new shell tab
</code></pre>
<p>If you see an error like:</p>
<pre><code class="language-sh">Error: listen EADDRINUSE :::8000
</code></pre>
<p>Make sure you exit all currently running servers (Ctrl+C) before starting a
new one. Refresh your browser and you should see:</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/catchemall.png" alt=""></figure>
<p>We can get stats for any Pokemon by pointing our browser to the respective name
like so:</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/stats.png" alt=""></figure>
<h4>Do You Even HMR?</h4>
<p>If you play around with what we have so far, you&#x2019;ll tend to notice that our workflow is still a little complicated. We need to manually restart our server whenever we make changes since a new bundle is generated. To get past that we may use a process manager (<a href="http://pm2.keymetrics.io/">pm2</a>, <a href="http://nodemon.io/">nodemon</a>, <a href="http://strong-pm.io/">StrongLoopPM</a>) to watch our files and trigger a webpack build before restarting our server. This definitely removes the hassle of doing it manually. However, it works well if we are not doing anything stateful or don&#x2019;t care about losing state in our server code. Go ahead and take a look at <a href="https://medium.com/u/a3a8af6addc1">Dan Abramov</a>&#x2019;s <a href="https://gaearon.github.io/react-hot-loader/">react-hot-loader</a> if this doesn&#x2019;t make sense. Let us leverage Webpack&#x2019;s <a href="https://webpack.github.io/docs/hot-module-replacement.html">Hot Module Replacement</a> API to hot patch our server side code. For now, we will restrict ourselves to the development environment.</p>
<p>Note that we are currently using <a href="https://github.com/webpack/webpack/blob/master/hot/poll.js">webpack/hot/poll</a> which polls the Node.js filestream (<code>fs</code>) every 1000 ms. In production we might want to use the more efficient <a href="https://github.com/webpack/webpack/blob/master/hot/signal.js">webpack/hot/signal</a> which listens on process events to check for updates. Creating a separate directory for the records Webpack will generate should also be a good idea.</p>
<p>The watch script needs to be modified to enable HMR. This can also be done by
using the <code>HotModuleReplacementPlugin</code> but don&#x2019;t use both.</p>
<pre><code class="language-sh">&apos;watch&apos;: &apos;npm run clean &amp;&amp; `npm bin`/webpack --env.dev --watch -- verbose --hot&apos;
</code></pre>
<p>We don&#x2019;t need to do much to handle the updated dependencies in our main
<code>index.js</code> file since we are using ES6 modules which are static in nature. The
following would suffice:</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/hmr.png" alt=""></figure>
<p>Go ahead and run the <code>watch</code> script followed by the <code>start</code> script in another
tab as before. Make changes to the <code>stats.js</code> module and refresh your browser to
see them live <strong>without restarting the server</strong>. The GIF below illustrates this
in the terminal:</p>
<figure><img src="https://yuppi.es/blog/kickback-with-koa-webpack/final.gif" alt=""></figure>
<h4>Fin?</h4>
<p>HMR is theoretically possible in production but has not been tested enough. It
is better to stick to a process manager when in production. On the development
end too however, we can take it one step further by handling the case where a
hot update fails or aborts. The server should appropriately restart in that
instance. Koa apps can be tested fluently with
<a href="https://github.com/visionmedia/supertest">supertest</a> which this repository will
implement soon.</p>
<p>Originally &#x1F4DD; on <a href="https://medium.com/@f0rr0/kickback-with-koa-webpack-a51d7e5d7911">Medium</a>.</p>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[On The Futility Of Trying To Make It]]></title>
        <id>https://yuppi.es/blog/on-the-futility-of-trying-to-make-it/</id>
        <link href="https://yuppi.es/blog/on-the-futility-of-trying-to-make-it/">
        </link>
        <updated>2018-06-23T22:00:00Z</updated>
        <summary type="html"><![CDATA[About two years ago, I had decided to abandon an idle existence and put myself out in what some call the 'real world’. The idea, back then, was to cultivate pragmatic skills and be successful in the trade of my choosing. Two years later, I am still as troubled as I was back then and perhaps even more so.]]></summary>
        <content type="html"><![CDATA[<figure><img src="https://yuppi.es/blog/on-the-futility-of-trying-to-make-it/hero.jpg" alt="&#x2018;Gloomy Skyline of Berlin&#x2019; - Painting by M Bleichner" class="full-width"><figcaption><a href="https://www.saatchiart.com/art/Painting-Gloomy-Skyline-of-Berlin-Germany/311983/2040173/view"></a></figcaption></figure>
<p>It has been a series of fortuitous events and impetuous decisions that has led me to where I am in my career. About two years ago, I had decided to abandon an idle existence and put myself out in what some call the &#x2018;real world&#x2019;. The idea, back then, was to cultivate pragmatic skills and be successful in the trade of my choosing. Two years later, I am still as troubled as I was back then and perhaps even more so. I have never subscribed to the dogma of finding and following one&#x2019;s passion. There is no such thing. As Cal Newport puts it-</p>
<blockquote>
<p>Passion comes after you put in the hard work to become excellent at something valuable, not before. In other words, what you do for a living is much less important than how you do it.</p>
</blockquote>
<p>But in the sprint to success, there&#x2019;s no prize for being good or even the best. None at all. At the 2008 summer Olympics, Usain Bolt had sufficiently established that he was the fastest man on Earth. Yet, he had to come back and do it all over again in 2012. Setting the precedent is not enough. It has to be upheld over and over again with possibly more resolve each consecutive time. V.S. Pritchett, in an essay on the English historian Edward Gibbon, observed that-</p>
<blockquote>
<p>Sooner or later, the great men turn out to be all alike. They never stop working. They never lose a minute. It is very depressing.</p>
</blockquote>
<p>It is only now becoming apparent to me that absolute success, vernacularly referred to as &#x2018;making it&#x2019;, is an urban myth. It is deceptive like the mirage in a desert. The thirsty traveller toils in its allure only to find it to be a figment of his imagination. His only consolation lies in carrying on and doing this over enough times to &#x2018;make it&#x2019; out of the desert. William Makepeace Thackeray, the author of  Vanity Fair, succinctly puts it as-</p>
<blockquote>
<p>Successful people aren&#x2019;t born that way. They become successful by establishing the habit of doing things unsuccessful people don&#x2019;t like to do. The successful people don&#x2019;t always like these things themselves; they just get on and do them.&#x201D;</p>
</blockquote>
<p>The utopian dream I had dreamt two years ago is a testament to my na&#xEF;vet&#xE9;. There is no grand moment of arriving, not now, not ever. It is but a grind and you hustle hard everyday or you go home. Success is not an act, it is a habit.</p>
]]></content>
        <author>
            <name>Sid Jain</name>
            <email>sid_26@outlook.com</email>
            <uri>https://yuppi.es/about</uri>
        </author>
    </entry>
</feed>